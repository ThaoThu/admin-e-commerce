{"ast":null,"code":"import _toConsumableArray from \"/home/rosa/Desktop/admin/demo1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nvar _jsxFileName = \"/home/rosa/Desktop/admin/demo1/src/app/pages/home/google-material/utils/UseMediaQueryExamplesPage.js\";\n\n/* eslint-disable no-restricted-imports */\nimport React from \"react\";\nimport Notice from \"../../../../partials/content/Notice\";\nimport CodeExample from \"../../../../partials/content/CodeExample\";\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\nimport { useTheme } from \"@material-ui/core/styles\";\nimport json2mq from \"json2mq\";\nimport useMediaQueryTheme from \"@material-ui/core/useMediaQuery\";\nimport mediaQuery from \"css-mediaquery\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport { createMuiTheme } from \"@material-ui/core/styles\"; // Example 4\n\nfunction MyComponent4() {\n  var matches = useMediaQueryTheme(\"@media (min-width:600px)\");\n  return /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 10\n    }\n  }, \"@media (min-width:600px) matches: \".concat(matches));\n} // Example 5\n\n\nfunction useWidth5() {\n  var theme5 = useTheme();\n\n  var keys5 = _toConsumableArray(theme5.breakpoints.keys).reverse();\n\n  return keys5.reduce(function (output, key) {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    var matches = useMediaQuery(theme5.breakpoints.only(key));\n    return !output && matches ? key : output;\n  }, null) || \"xs\";\n}\n\nfunction MyComponent5() {\n  var width5 = useWidth5();\n  return /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 10\n    }\n  }, \"width: \".concat(width5));\n}\n\nvar theme5 = createMuiTheme();\nexport default function UseMediaQueryExamplesPage() {\n  // Example 1\n  var matches1 = useMediaQuery(\"(min-width:600px)\"); // Example 2\n\n  var theme2 = useTheme();\n  var matches2 = useMediaQuery(theme2.breakpoints.up(\"sm\")); // Example 3\n\n  var matches3 = useMediaQuery(json2mq({\n    minWidth: 600\n  })); // Example 4\n\n  var ssrMatchMedia4 = function ssrMatchMedia4(query) {\n    return {\n      matches4: mediaQuery.match(query, {\n        // The estimated CSS width of the browser.\n        // For the sake of this demo, we are using a fixed value.\n        // In production, you can look into client-hint https://caniuse.com/#search=client%20hint\n        // or user-agent resolution.\n        width: 800\n      })\n    };\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Notice, {\n    icon: \"flaticon-warning kt-font-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, \"This is a CSS media query hook for React. It listens for matches to a CSS media query. It allows the rendering of components based on whether the query matches or not.\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, \"For more info please check the components's official\", \" \", /*#__PURE__*/React.createElement(\"a\", {\n    target: \"_blank\",\n    className: \"kt-link\",\n    rel: \"noopener noreferrer\",\n    href: \"https://material-ui.com/components/use-media-query/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }, \"demos & documentation\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CodeExample, {\n    jsCode: jsCode1,\n    beforeCodeTitle: \"Simple media query\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"kt-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"kt-section__sub\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 15\n    }\n  }, \"You should provide a media query to the first argument of the hook. The media query string can by any valid CSS media query, e.g. \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 22\n    }\n  }, \"'print'\"), \".\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"kt-separator kt-separator--dashed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"kt-section__content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }\n  }, \"(min-width:600px) matches: \".concat(matches1)))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CodeExample, {\n    jsCode: jsCode2,\n    beforeCodeTitle: \"Using Material-UI's breakpoint helpers\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"kt-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"kt-section__sub\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 15\n    }\n  }, \"You can use Material-UI's \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 43\n    }\n  }, \"breakpoint helpers\"), \" as follows:\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"kt-separator kt-separator--dashed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"kt-section__content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }\n  }, \"theme.breakpoints.up('sm') matches: \".concat(matches2))))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CodeExample, {\n    jsCode: jsCode3,\n    beforeCodeTitle: \"Using JavaScript syntax\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"kt-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"kt-section__sub\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 17\n    }\n  }, \"json2mq\"), \" is used to generate media query string from a JavaScript object.\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"kt-separator kt-separator--dashed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"kt-section__content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 17\n    }\n  }, \"{ minWidth: 600 } matches: \".concat(matches3)))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CodeExample, {\n    jsCode: jsCode4,\n    beforeCodeTitle: \"Server-side rendering\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"kt-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"kt-section__sub\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 15\n    }\n  }, \"An implementation of matchMedia is required on the server, we recommend using css-mediaquery. We also encourage the usage of the \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 21\n    }\n  }, \"useMediaQueryTheme\"), \" version of the hook that fetches properties from the theme. This way, you can provide a\", \" \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 17\n    }\n  }, \"ssrMatchMedia\"), \" option once for all your React tree.\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"kt-separator kt-separator--dashed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"kt-section__content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: {\n      props: {\n        MuiUseMediaQuery: {\n          ssrMatchMedia4: ssrMatchMedia4\n        }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(MyComponent4, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 19\n    }\n  }))))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col-md-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CodeExample, {\n    jsCode: jsCode5,\n    beforeCodeTitle: \"Migrating from withWidth()\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"kt-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"kt-section__sub\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 15\n    }\n  }, \"The \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 21\n    }\n  }, \"withWidth()\"), \" higher-order component injects the screen width of the page. You can reproduce the same behavior with a \", /*#__PURE__*/React.createElement(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 24\n    }\n  }, \"useWidth\"), \" hook:\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"kt-separator kt-separator--dashed\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"kt-section__content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: theme5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(MyComponent5, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 19\n    }\n  }))))))));\n}\nvar jsCode1 = \"\\nimport React from 'react';\\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\\n\\nexport default function SimpleMediaQuery() {\\n  const matches = useMediaQuery('(min-width:600px)');\\n\\n  return <span>{`(min-width:600px) matches: ${matches}`}</span>;\\n}\\n\";\nvar jsCode2 = \"\\nimport React from 'react';\\nimport { createMuiTheme, useTheme } from '@material-ui/core/styles';\\nimport { ThemeProvider } from '@material-ui/styles';\\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\\n\\nfunction MyComponent() {\\n  const theme = useTheme();\\n  const matches = useMediaQuery(theme.breakpoints.up('sm'));\\n\\n  return <span>{`theme.breakpoints.up('sm') matches: ${matches}`}</span>;\\n}\\n\\nconst theme = createMuiTheme();\\n\\nexport default function ThemeHelper() {\\n  return (\\n    <ThemeProvider theme={theme}>\\n      <MyComponent />\\n    </ThemeProvider>\\n  );\\n}\\n\";\nvar jsCode3 = \"\\nimport React from 'react';\\nimport json2mq from 'json2mq';\\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\\n\\nexport default function JavaScriptMedia() {\\n  const matches = useMediaQuery(\\n    json2mq({\\n      minWidth: 600,\\n    }),\\n  );\\n\\n  return <span>{`{ minWidth: 600 } matches: ${matches}`}</span>;\\n}\\n\";\nvar jsCode4 = \"\\nimport React from 'react';\\nimport mediaQuery from 'css-mediaquery';\\nimport { ThemeProvider } from '@material-ui/styles';\\nimport useMediaQueryTheme from '@material-ui/core/useMediaQuery';\\n\\nfunction MyComponent() {\\n  const matches = useMediaQueryTheme('@media (min-width:600px)');\\n\\n  return <span>{`@media (min-width:600px) matches: ${matches}`}</span>;\\n}\\n\\nexport default function ServerSide() {\\n  // Use https://github.com/ericf/css-mediaquery as ponyfill.\\n  const ssrMatchMedia = query => ({\\n    matches: mediaQuery.match(query, {\\n      // The estimated CSS width of the browser.\\n      // For the sake of this demo, we are using a fixed value.\\n      // In production, you can look into client-hint https://caniuse.com/#search=client%20hint\\n      // or user-agent resolution.\\n      width: 800,\\n    }),\\n  });\\n\\n  return (\\n    <ThemeProvider theme={{ props: { MuiUseMediaQuery: { ssrMatchMedia } } }}>\\n      <MyComponent />\\n    </ThemeProvider>\\n  );\\n}\\n\";\nvar jsCode5 = \"\\n/**\\n * Be careful using this hook. It only works because the number of\\n * breakpoints in theme is static. It will break once you change the number of\\n * breakpoints. See https://reactjs.org/docs/hooks-rules.html#only-call-hooks-at-the-top-level\\n */\\nfunction useWidth() {\\n  const theme = useTheme();\\n  const keys = [...theme.breakpoints.keys].reverse();\\n  return (\\n    keys.reduce((output, key) => {\\n      // eslint-disable-next-line react-hooks/rules-of-hooks\\n      const matches = useMediaQuery(theme.breakpoints.only(key));\\n      return !output && matches ? key : output;\\n    }, null) || 'xs'\\n  );\\n}\\n\";","map":{"version":3,"sources":["/home/rosa/Desktop/admin/demo1/src/app/pages/home/google-material/utils/UseMediaQueryExamplesPage.js"],"names":["React","Notice","CodeExample","useMediaQuery","useTheme","json2mq","useMediaQueryTheme","mediaQuery","ThemeProvider","createMuiTheme","MyComponent4","matches","useWidth5","theme5","keys5","breakpoints","keys","reverse","reduce","output","key","only","MyComponent5","width5","UseMediaQueryExamplesPage","matches1","theme2","matches2","up","matches3","minWidth","ssrMatchMedia4","query","matches4","match","width","jsCode1","jsCode2","jsCode3","jsCode4","props","MuiUseMediaQuery","jsCode5"],"mappings":"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","sourcesContent":["/* eslint-disable no-restricted-imports */\r\nimport React from \"react\";\r\nimport Notice from \"../../../../partials/content/Notice\";\r\nimport CodeExample from \"../../../../partials/content/CodeExample\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport { useTheme } from \"@material-ui/core/styles\";\r\nimport json2mq from \"json2mq\";\r\nimport useMediaQueryTheme from \"@material-ui/core/useMediaQuery\";\r\nimport mediaQuery from \"css-mediaquery\";\r\nimport { ThemeProvider } from \"@material-ui/styles\";\r\nimport { createMuiTheme } from \"@material-ui/core/styles\";\r\n\r\n// Example 4\r\nfunction MyComponent4() {\r\n  const matches = useMediaQueryTheme(\"@media (min-width:600px)\");\r\n\r\n  return <span>{`@media (min-width:600px) matches: ${matches}`}</span>;\r\n}\r\n\r\n// Example 5\r\nfunction useWidth5() {\r\n  const theme5 = useTheme();\r\n  const keys5 = [...theme5.breakpoints.keys].reverse();\r\n  return (\r\n    keys5.reduce((output, key) => {\r\n      // eslint-disable-next-line react-hooks/rules-of-hooks\r\n      const matches = useMediaQuery(theme5.breakpoints.only(key));\r\n      return !output && matches ? key : output;\r\n    }, null) || \"xs\"\r\n  );\r\n}\r\n\r\nfunction MyComponent5() {\r\n  const width5 = useWidth5();\r\n  return <span>{`width: ${width5}`}</span>;\r\n}\r\n\r\nconst theme5 = createMuiTheme();\r\n\r\nexport default function UseMediaQueryExamplesPage() {\r\n  // Example 1\r\n  const matches1 = useMediaQuery(\"(min-width:600px)\");\r\n\r\n  // Example 2\r\n  const theme2 = useTheme();\r\n  const matches2 = useMediaQuery(theme2.breakpoints.up(\"sm\"));\r\n\r\n  // Example 3\r\n  const matches3 = useMediaQuery(\r\n    json2mq({\r\n      minWidth: 600\r\n    })\r\n  );\r\n\r\n  // Example 4\r\n  const ssrMatchMedia4 = query => ({\r\n    matches4: mediaQuery.match(query, {\r\n      // The estimated CSS width of the browser.\r\n      // For the sake of this demo, we are using a fixed value.\r\n      // In production, you can look into client-hint https://caniuse.com/#search=client%20hint\r\n      // or user-agent resolution.\r\n      width: 800\r\n    })\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <Notice icon=\"flaticon-warning kt-font-primary\">\r\n        <p>\r\n          This is a CSS media query hook for React. It listens for matches to a\r\n          CSS media query. It allows the rendering of components based on\r\n          whether the query matches or not.\r\n        </p>\r\n        <p>\r\n          For more info please check the components's official{\" \"}\r\n          <a\r\n            target=\"_blank\"\r\n            className=\"kt-link\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://material-ui.com/components/use-media-query/\"\r\n          >\r\n            demos & documentation\r\n          </a>\r\n        </p>\r\n      </Notice>\r\n\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <CodeExample jsCode={jsCode1} beforeCodeTitle=\"Simple media query\">\r\n            <div className=\"kt-section\">\r\n              <span className=\"kt-section__sub\">\r\n                You should provide a media query to the first argument of the\r\n                hook. The media query string can by any valid CSS media query,\r\n                e.g. <code>'print'</code>.\r\n              </span>\r\n              <div className=\"kt-separator kt-separator--dashed\"></div>\r\n              <div className=\"kt-section__content\">\r\n                <span>{`(min-width:600px) matches: ${matches1}`}</span>\r\n              </div>\r\n            </div>\r\n          </CodeExample>\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          <CodeExample\r\n            jsCode={jsCode2}\r\n            beforeCodeTitle=\"Using Material-UI's breakpoint helpers\"\r\n          >\r\n            <div className=\"kt-section\">\r\n              <span className=\"kt-section__sub\">\r\n                You can use Material-UI's <code>breakpoint helpers</code> as\r\n                follows:\r\n              </span>\r\n              <div className=\"kt-separator kt-separator--dashed\"></div>\r\n              <div className=\"kt-section__content\">\r\n                <span>{`theme.breakpoints.up('sm') matches: ${matches2}`}</span>\r\n              </div>\r\n            </div>\r\n          </CodeExample>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <CodeExample\r\n            jsCode={jsCode3}\r\n            beforeCodeTitle=\"Using JavaScript syntax\"\r\n          >\r\n            <div className=\"kt-section\">\r\n              <span className=\"kt-section__sub\">\r\n                <code>json2mq</code> is used to generate media query string from\r\n                a JavaScript object.\r\n              </span>\r\n              <div className=\"kt-separator kt-separator--dashed\"></div>\r\n              <div className=\"kt-section__content\">\r\n                <span>{`{ minWidth: 600 } matches: ${matches3}`}</span>\r\n              </div>\r\n            </div>\r\n          </CodeExample>\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          <CodeExample jsCode={jsCode4} beforeCodeTitle=\"Server-side rendering\">\r\n            <div className=\"kt-section\">\r\n              <span className=\"kt-section__sub\">\r\n                An implementation of matchMedia is required on the server, we\r\n                recommend using css-mediaquery. We also encourage the usage of\r\n                the <code>useMediaQueryTheme</code> version of the hook that\r\n                fetches properties from the theme. This way, you can provide a{\" \"}\r\n                <code>ssrMatchMedia</code> option once for all your React tree.\r\n              </span>\r\n              <div className=\"kt-separator kt-separator--dashed\"></div>\r\n              <div className=\"kt-section__content\">\r\n                <ThemeProvider\r\n                  theme={{ props: { MuiUseMediaQuery: { ssrMatchMedia4 } } }}\r\n                >\r\n                  <MyComponent4 />\r\n                </ThemeProvider>\r\n              </div>\r\n            </div>\r\n          </CodeExample>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"row\">\r\n        <div className=\"col-md-6\">\r\n          <CodeExample\r\n            jsCode={jsCode5}\r\n            beforeCodeTitle=\"Migrating from withWidth()\"\r\n          >\r\n            <div className=\"kt-section\">\r\n              <span className=\"kt-section__sub\">\r\n                The <code>withWidth()</code> higher-order component injects the\r\n                screen width of the page. You can reproduce the same behavior\r\n                with a <code>useWidth</code> hook:\r\n              </span>\r\n              <div className=\"kt-separator kt-separator--dashed\"></div>\r\n              <div className=\"kt-section__content\">\r\n                <ThemeProvider theme={theme5}>\r\n                  <MyComponent5 />\r\n                </ThemeProvider>\r\n              </div>\r\n            </div>\r\n          </CodeExample>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nconst jsCode1 = `\r\nimport React from 'react';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\n\r\nexport default function SimpleMediaQuery() {\r\n  const matches = useMediaQuery('(min-width:600px)');\r\n\r\n  return <span>{\\`(min-width:600px) matches: \\${matches}\\`}</span>;\r\n}\r\n`;\r\nconst jsCode2 = `\r\nimport React from 'react';\r\nimport { createMuiTheme, useTheme } from '@material-ui/core/styles';\r\nimport { ThemeProvider } from '@material-ui/styles';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\n\r\nfunction MyComponent() {\r\n  const theme = useTheme();\r\n  const matches = useMediaQuery(theme.breakpoints.up('sm'));\r\n\r\n  return <span>{\\`theme.breakpoints.up('sm') matches: \\${matches}\\`}</span>;\r\n}\r\n\r\nconst theme = createMuiTheme();\r\n\r\nexport default function ThemeHelper() {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <MyComponent />\r\n    </ThemeProvider>\r\n  );\r\n}\r\n`;\r\nconst jsCode3 = `\r\nimport React from 'react';\r\nimport json2mq from 'json2mq';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\n\r\nexport default function JavaScriptMedia() {\r\n  const matches = useMediaQuery(\r\n    json2mq({\r\n      minWidth: 600,\r\n    }),\r\n  );\r\n\r\n  return <span>{\\`{ minWidth: 600 } matches: \\${matches}\\`}</span>;\r\n}\r\n`;\r\nconst jsCode4 = `\r\nimport React from 'react';\r\nimport mediaQuery from 'css-mediaquery';\r\nimport { ThemeProvider } from '@material-ui/styles';\r\nimport useMediaQueryTheme from '@material-ui/core/useMediaQuery';\r\n\r\nfunction MyComponent() {\r\n  const matches = useMediaQueryTheme('@media (min-width:600px)');\r\n\r\n  return <span>{\\`@media (min-width:600px) matches: \\${matches}\\`}</span>;\r\n}\r\n\r\nexport default function ServerSide() {\r\n  // Use https://github.com/ericf/css-mediaquery as ponyfill.\r\n  const ssrMatchMedia = query => ({\r\n    matches: mediaQuery.match(query, {\r\n      // The estimated CSS width of the browser.\r\n      // For the sake of this demo, we are using a fixed value.\r\n      // In production, you can look into client-hint https://caniuse.com/#search=client%20hint\r\n      // or user-agent resolution.\r\n      width: 800,\r\n    }),\r\n  });\r\n\r\n  return (\r\n    <ThemeProvider theme={{ props: { MuiUseMediaQuery: { ssrMatchMedia } } }}>\r\n      <MyComponent />\r\n    </ThemeProvider>\r\n  );\r\n}\r\n`;\r\nconst jsCode5 = `\r\n/**\r\n * Be careful using this hook. It only works because the number of\r\n * breakpoints in theme is static. It will break once you change the number of\r\n * breakpoints. See https://reactjs.org/docs/hooks-rules.html#only-call-hooks-at-the-top-level\r\n */\r\nfunction useWidth() {\r\n  const theme = useTheme();\r\n  const keys = [...theme.breakpoints.keys].reverse();\r\n  return (\r\n    keys.reduce((output, key) => {\r\n      // eslint-disable-next-line react-hooks/rules-of-hooks\r\n      const matches = useMediaQuery(theme.breakpoints.only(key));\r\n      return !output && matches ? key : output;\r\n    }, null) || 'xs'\r\n  );\r\n}\r\n`;\r\n"]},"metadata":{},"sourceType":"module"}